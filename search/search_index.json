{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coverage Analyzer Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>The Coverage Analyzer is a Streamlit-based dashboard application that provides comprehensive analysis of security coverage using the Stellar Cyber API and MITRE ATT&amp;CK framework. The application helps security teams understand their current detection coverage and simulate potential improvements through additional data sources.</p>"},{"location":"#installation-options","title":"Installation Options","text":"<ol> <li>Manual Python<ul> <li>Requires Python 3.10+</li> <li>Can be installed locally and run locally. uv or pip used to install dependencies.</li> </ul> </li> <li>Docker Container<ul> <li>Platform independent</li> <li>Supports both arm64 and amd64</li> <li>Ideal for cloud deployments</li> </ul> </li> </ol> <p>See the Installation Guide for detailed instructions.</p>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TD\n    A[User Interface] --&gt; B[StreamlitCoverageAnalyzer]\n    B --&gt; C[StellarCyberAPI]\n    B --&gt; D[StellarMitre]\n    C --&gt; E[Stellar Cyber Platform]\n    D --&gt; F[MITRE ATT&amp;CK]\n</code></pre>"},{"location":"#core-components","title":"Core Components","text":"Component Description StellarCyberAPI Handles all Stellar Cyber API interactions StellarMitre Manages MITRE ATT&amp;CK framework integration StreamlitCoverageAnalyzer Core application logic and analysis UI Components Dashboard layout and interactive elements"},{"location":"#performance-features","title":"Performance Features","text":"Feature Description Data Processing Efficient Polars-based data manipulation Caching Multi-level caching strategy Visualization Optimized Plotly configurations Memory Management Smart resource allocation and cleanup"},{"location":"#security-features","title":"Security Features","text":"Feature Description Authentication Secure API key and token management Data Protection SSL verification and encryption Access Control Role-based access control Monitoring Comprehensive security logging"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li> <p>Download and install the executable for your platform from the GitHub Releases page</p> </li> <li> <p>Run the application:     <pre><code>coverage-analyzer\n</code></pre>     For headless environments:     <pre><code>coverage-analyzer --headless\n</code></pre></p> </li> <li> <p>Configure your Stellar Cyber credentials in the UI</p> </li> </ol>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#environment-variables","title":"Environment Variables","text":"Variable Description Required <code>STCA_COOKIES_PASSWORD</code> Cookie encryption password No"},{"location":"#development","title":"Development","text":"<ol> <li> <p>Clone the repository:     <pre><code>git clone https://github.com/yourusername/coverage-analyzer.git\n</code></pre></p> </li> <li> <p>Install dependencies:     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Run tests:     <pre><code>poetry run pytest\n</code></pre></p> </li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"api/","title":"API Reference","text":"<p>Overview</p> <p>This document provides comprehensive API documentation for the Coverage Analyzer's core components: StellarCyberAPI, StellarMitre, and StreamlitCoverageAnalyzer.</p>"},{"location":"api/#stellarcyberapi","title":"StellarCyberAPI","text":"<p>The <code>StellarCyberAPI</code> class provides a Python interface for interacting with the Stellar Cyber API. It handles authentication, request management, and provides methods for retrieving various types of data from the platform.</p>"},{"location":"api/#key-features","title":"Key Features","text":"<ul> <li>Automatic token management and refresh</li> <li>Cached HTTP requests for improved performance</li> <li>Support for multiple Stellar Cyber platform versions</li> <li>Methods for retrieving tenants, connectors, detections, and data sources</li> <li>Elasticsearch query interface</li> <li>Comprehensive data source analytics</li> </ul>"},{"location":"api/#usage-examples","title":"Usage Examples","text":"<pre><code># Initialize the API client\napi = StellarCyberAPI(\n    host=\"https://example.stellarcyber.cloud\",\n    username=\"user@example.com\",\n    api_key=\"your-api-key\",\n    version=\"5.2.x\"\n)\n\n# Get list of tenants\ntenants = api.get_tenants()\n\n# Get detections for a specific tenant\ndetections = api.get_detections(tenant_id=\"tenant-id\")\n\n# Get data sources for a date range\nfrom datetime import date\nsources = api.get_connector_log_data_sources(\n    start_date=date(2023, 1, 1),\n    end_date=date(2023, 12, 31),\n    tenant=\"tenant-name\"\n)\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API client handles various types of errors: - HTTPError: For HTTP-level errors (4xx, 5xx responses) - ConnectionError: For network connectivity issues - Timeout: For request timeouts - RequestException: For general request handling errors</p>"},{"location":"api/#version-compatibility","title":"Version Compatibility","text":"<p>The client supports multiple Stellar Cyber platform versions: - 4.3.0 - 4.3.1 - 4.3.7 - 5.1.x - 5.2.x - 5.3.x</p>"},{"location":"api/#stellarmitre","title":"StellarMitre","text":"<p>The <code>StellarMitre</code> class provides functionality for interacting with the MITRE ATT&amp;CK framework and Stellar Cyber's detection data.</p>"},{"location":"api/#key-features_1","title":"Key Features","text":"<ul> <li>MITRE ATT&amp;CK Integration: Automatic download and caching of MITRE ATT&amp;CK STIX files</li> <li>Tactics &amp; Techniques: Methods for retrieving MITRE tactics and techniques with detailed metadata</li> <li>Detection Integration: Integration with Stellar Cyber's detection data sources and mappings</li> <li>Version Support: Support for multiple Stellar Cyber platform versions</li> <li>Performance: Cached HTTP requests for improved performance</li> </ul>"},{"location":"api/#usage-examples_1","title":"Usage Examples","text":"<pre><code># Initialize the MITRE interface\nmitre = StellarMitre()\n\n# Get all MITRE tactics\ntactics = mitre.get_tactics()\n\n# Get all MITRE techniques\ntechniques = mitre.get_techniques()\n\n# Get techniques for specific tactic\ntactic_techniques = mitre.get_techniques_by_tactic(\"initial-access\")\n\n# Get combined tactics and techniques\ntactics_and_techniques = mitre.get_tactics_and_techniques()\n\n# Get Stellar Cyber detection data sources\ndatasources = mitre.get_detections_datasources()\n</code></pre>"},{"location":"api/#streamlitcoverageanalyzer","title":"StreamlitCoverageAnalyzer","text":"<p>The <code>StreamlitCoverageAnalyzer</code> class provides a Streamlit-optimized interface for analyzing security coverage data.</p>"},{"location":"api/#key-features_2","title":"Key Features","text":"<ul> <li>Streamlit Integration: Built-in caching optimized for Streamlit applications</li> <li>Coverage Analysis: Comprehensive MITRE ATT&amp;CK coverage analysis</li> <li>Data Source Tracking: Detailed data source usage tracking and statistics</li> <li>Alert Analysis: In-depth alert type analysis and statistics</li> <li>Multi-tenant Support: Support for analyzing multiple tenants</li> <li>Cache Configuration: Configurable cache TTL for performance optimization</li> </ul>"},{"location":"api/#usage-examples_2","title":"Usage Examples","text":"<pre><code># Initialize analyzer\nanalyzer = StreamlitCoverageAnalyzer(\n    name=\"My Instance\",\n    host=\"https://example.stellarcyber.cloud\",\n    username=\"user@example.com\",\n    api_key=\"your-api-key\",\n    version=\"5.2.x\",\n    cache_ttl=\"15m\"  # 15 minute cache\n)\n\n# Get comprehensive coverage statistics\nstats = analyzer.compile_stats(\n    data_sources=selected_sources,\n    start_date=start_date,\n    end_date=end_date,\n    tenant_name=tenant\n)\n\n# Access different aspects\ntactics = stats[\"tactics\"]\ntechniques = stats[\"techniques\"]\nalerts = stats[\"alert_types\"]\n\n# Get detailed data source statistics\nds_stats = analyzer.get_datasource_stats(selected_sources)\n</code></pre>"},{"location":"api/#statistics-output-format","title":"Statistics Output Format","text":"<p>The <code>compile_stats()</code> method returns a comprehensive dictionary:</p> <pre><code>{\n    \"tactics\": {\n        \"tactic_stats\": {...},\n        \"tactics_covered\": int,\n        \"tactics_triggered\": int,\n        \"tactics_available\": int,\n        \"tactics_covered_per\": float\n    },\n    \"techniques\": {\n        \"technique_stats\": {...},\n        \"techniques_covered\": int,\n        \"techniques_triggered\": int,\n        \"techniques_available\": int,\n        \"techniques_covered_per\": float\n    },\n    \"alert_types\": {\n        \"alert_type_stats\": {...},\n        \"alert_types_covered\": int,\n        \"alert_types_triggered\": int,\n        \"alert_types_available\": int,\n        \"alert_types_covered_per\": float\n    }\n}\n</code></pre>"},{"location":"api/#caching","title":"Caching","text":"<p>The class uses Streamlit's caching mechanisms:</p> Cache Type Usage @cache_data For data that changes frequently @cache_resource For resources that should persist across reruns <p>The default cache TTL is 15 minutes but can be configured during initialization.</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#quick-setup","title":"Quick Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/coverage-analyzer.git\ncd coverage-analyzer\n\n# Install dependencies\nuv sync\n\n# Set up pre-commit hooks\npre-commit install\n\n# Run development server\nuv run streamlit run app.py\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>coverage_analyzer/\n\u251c\u2500\u2500 coverage_analyzer/        # Main package\n\u2502   \u251c\u2500\u2500 __init__.py          # Package initialization\n\u2502   \u251c\u2500\u2500 mitre.py            # MITRE ATT&amp;CK integration\n\u2502   \u251c\u2500\u2500 pdf.py              # PDF report generation\n\u2502   \u251c\u2500\u2500 plots.py            # Data visualization\n\u2502   \u251c\u2500\u2500 stellar.py          # Stellar Cyber API client\n\u2502   \u251c\u2500\u2500 streamlit.py        # Main application logic\n\u2502   \u251c\u2500\u2500 ui.py              # User interface components\n\u2502   \u2514\u2500\u2500 vars.py            # Configuration and constants\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 tests/                  # Test suite\n\u251c\u2500\u2500 Dockerfile             # Container definition\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u2514\u2500\u2500 README.md             # Project overview\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#1-environment-setup","title":"1. Environment Setup","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate environment\nsource .venv/bin/activate  # Unix\n.venv\\Scripts\\activate     # Windows\n\n# Install dependencies\nuv sync\n</code></pre>"},{"location":"development/#2-code-quality-tools","title":"2. Code Quality Tools","text":""},{"location":"development/#type-checking","title":"Type Checking","text":"<pre><code># Run mypy\nmypy coverage_analyzer\n\n# Example type hints\ndef process_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Process data with type safety.\"\"\"\n    result: Dict[str, Any] = {}\n    return result\n</code></pre>"},{"location":"development/#linting","title":"Linting","text":"<pre><code># Run linters\nruff check coverage_analyzer\nblack coverage_analyzer\n\n# Example configuration\n# pyproject.toml\n[tool.ruff]\nline-length = 88\ntarget-version = \"py310\"\n</code></pre>"},{"location":"development/#3-testing","title":"3. Testing","text":""},{"location":"development/#unit-tests","title":"Unit Tests","text":"<pre><code># Run tests\npytest\n\n# Example test\ndef test_data_processor():\n    processor = DataProcessor()\n    result = processor.process_data({\"test\": \"data\"})\n    assert \"test\" in result\n</code></pre>"},{"location":"development/#coverage","title":"Coverage","text":"<pre><code># Run with coverage\npytest --cov=coverage_analyzer\n\n# Generate report\ncoverage report\n</code></pre>"},{"location":"development/#code-style","title":"Code Style","text":""},{"location":"development/#type-hints","title":"Type Hints","text":"<pre><code>from typing import Dict, List, Optional, Union\n\ndef process_data(\n    data: Dict[str, Any],\n    options: Optional[List[str]] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Process data with type safety.\n\n    Args:\n        data: Input data dictionary\n        options: Optional processing options\n\n    Returns:\n        Processed data dictionary\n    \"\"\"\n    result: Dict[str, Any] = {}\n    return result\n</code></pre>"},{"location":"development/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/#unit-testing","title":"Unit Testing","text":"<pre><code># test_mitre.py\ndef test_get_tactics():\n    mitre = StellarMitre()\n    tactics = mitre.get_tactics()\n    assert isinstance(tactics, list)\n    assert all(isinstance(t, dict) for t in tactics)\n    assert all(\"name\" in t for t in tactics)\n\n# test_api.py\ndef test_api_authentication():\n    api = StellarCyberAPI(host=\"test\", username=\"test\", api_key=\"test\")\n    with pytest.raises(HTTPError):\n        api.get_token()\n</code></pre>"},{"location":"development/#integration-testing","title":"Integration Testing","text":"<pre><code>def test_full_data_flow():\n    analyzer = StreamlitCoverageAnalyzer(\n        name=\"test\",\n        host=\"test\",\n        username=\"test\",\n        api_key=\"test\"\n    )\n    stats = analyzer.compile_stats(\n        data_sources=[\"test\"],\n        start_date=date.today(),\n        end_date=date.today()\n    )\n    assert isinstance(stats, dict)\n    assert \"tactics\" in stats\n</code></pre>"},{"location":"development/#performance-testing","title":"Performance Testing","text":"<pre><code>def test_large_dataset_performance():\n    large_data = generate_large_dataset()\n    start_time = time.time()\n    result = process_large_dataset(large_data)\n    end_time = time.time()\n    assert end_time - start_time &lt; 5.0  # Should process in under 5 seconds\n</code></pre>"},{"location":"development/#maintenance","title":"Maintenance","text":""},{"location":"development/#regular-tasks","title":"Regular Tasks","text":"Task Frequency Description Update Dependencies Weekly Check for security updates Review Logs Daily Check error logs Clean Cache Weekly Clear old cache entries Run Tests Monthly Run test suite"},{"location":"development/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>def monitor_resources():\n    import psutil\n    process = psutil.Process()\n    memory = process.memory_info()\n    logger.info(\n        \"Resource usage\",\n        extra={\n            \"memory_mb\": memory.rss / 1024 / 1024,\n            \"cpu_percent\": process.cpu_percent(),\n            \"threads\": process.num_threads()\n        }\n    )\n</code></pre>"},{"location":"development/#error-handling","title":"Error Handling","text":"<pre><code>def handle_error(e: Exception) -&gt; str:\n    \"\"\"Handle errors without exposing sensitive information.\"\"\"\n    if isinstance(e, HTTPError):\n        return \"An error occurred while connecting to the service\"\n    if isinstance(e, AuthenticationError):\n        return \"Authentication failed\"\n    return \"An unexpected error occurred\"\n</code></pre>"},{"location":"development/#continuous-integration","title":"Continuous Integration","text":"<pre><code>name: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.10'\n      - name: Install dependencies\n        run: |\n          pip install uv\n          uv sync\n      - name: Run tests\n        run: |\n          pytest\n</code></pre>"},{"location":"development/#best-practices","title":"Best Practices","text":""},{"location":"development/#code-organization","title":"Code Organization","text":"<ul> <li>Use modular architecture</li> <li>Maintain clear separation of concerns</li> <li>Follow consistent coding style</li> <li>Write comprehensive documentation</li> </ul>"},{"location":"development/#error-handling_1","title":"Error Handling","text":"<ul> <li>Implement proper exception handling</li> <li>Provide clear error messages</li> <li>Use error recovery strategies</li> <li>Give appropriate user feedback</li> </ul>"},{"location":"development/#performance","title":"Performance","text":"<ul> <li>Use efficient algorithms</li> <li>Implement proper resource management</li> <li>Utilize caching strategies</li> <li>Monitor and optimize performance</li> </ul>"},{"location":"development/#security","title":"Security","text":"<ul> <li>Validate all inputs</li> <li>Sanitize all outputs</li> <li>Use secure defaults</li> <li>Implement proper authentication</li> </ul>"},{"location":"development/#tools-and-resources","title":"Tools and Resources","text":""},{"location":"development/#development-tools","title":"Development Tools","text":"<ul> <li>mypy: Static type checking</li> <li>ruff: Fast Python linter</li> <li>black: Code formatting</li> <li>pytest: Testing framework</li> </ul>"},{"location":"development/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li>psutil: System monitoring</li> <li>prometheus: Metrics collection</li> <li>grafana: Visualization</li> <li>logging: Application logging</li> </ul>"},{"location":"development/#documentation","title":"Documentation","text":"<ul> <li>API Reference</li> </ul>"},{"location":"installation/","title":"Installation Documentation","text":""},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#1-manual-installation","title":"1. Manual Installation","text":"<p>For development or customization purposes, you can install from source:</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher (but less than 3.14)</li> <li>pip or uv package manager</li> <li>Git</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"Using uv (Recommended)Using Pip"},{"location":"installation/#clone-repository","title":"Clone repository","text":"<pre><code>git clone https://github.com/stellarcyber/detection_coverage_app.git\ncd detection_coverage_app\n</code></pre>"},{"location":"installation/#install-dependencies-with-uv","title":"Install dependencies with uv","text":"<pre><code>uv sync\n</code></pre>"},{"location":"installation/#run-with-uv","title":"Run with uv","text":"<pre><code>uv run run.py\n</code></pre>"},{"location":"installation/#or","title":"OR","text":"<pre><code>uv run streamlit run app.py\n</code></pre>"},{"location":"installation/#clone-repository_1","title":"Clone repository","text":"<pre><code>git clone https://github.com/stellarcyber/detection_coverage_app.git\ncd detection_coverage_app\n</code></pre>"},{"location":"installation/#create-and-activate-virtual-environment","title":"Create and activate virtual environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate  # Unix/macOS\n</code></pre>"},{"location":"installation/#or_1","title":"or","text":"<pre><code>.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"installation/#install-dependencies","title":"Install dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"installation/#run-using-streamlit","title":"Run using streamlit","text":"<pre><code>streamlit run app.py\n</code></pre>"},{"location":"installation/#or_2","title":"OR","text":"<pre><code>python run.py\n</code></pre>"},{"location":"installation/#2-docker-installation-arm64amd64","title":"2. Docker Installation (arm64/amd64)","text":"<p>Our Docker image supports both arm64 and amd64 architectures.</p> Using Pre-built ImageBuilding Locally <pre><code># Pull the image\ndocker pull ghcr.io/stellarcyber/detection_coverage_app/coverage_analyzer:latest\n\n# Run the container\ndocker run -p 8501:8501 ghcr.io/stellarcyber/detection_coverage_app/coverage_analyzer:latest\n</code></pre> <pre><code># Build the image\ndocker build -t coverage_analyzer .\n\n# Run the container\ndocker run -p 8501:8501 coverage_analyzer\n</code></pre>"},{"location":"installation/#running-the-application","title":"Running the Application","text":""},{"location":"installation/#gui-mode-default","title":"GUI Mode (Default)","text":"<p><pre><code># Using installed command\ncoverage-analyzer\n\n# Using streamlit directly\nstreamlit run app.py\n\n# Using Python script\npython run.py\n</code></pre> The application will attempt to automatically open your default web browser.</p>"},{"location":"installation/#headless-mode","title":"Headless Mode","text":"<p>For environments without a GUI (e.g., servers): <pre><code>coverage-analyzer --headless\n</code></pre></p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"Component Minimum Recommended RAM 4GB 8GB+ CPU 2 cores 4+ cores Disk Space 500MB 1GB+ Internet Required Required Browser Modern (Chrome recommended) Latest Chrome"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation:</p> <ol> <li> <p>Run the application using any of these methods:    <pre><code># Using installed command\ncoverage-analyzer\n\n# Using streamlit\nstreamlit run app.py\n\n# Using Python script\npython run.py\n</code></pre></p> </li> <li> <p>Verify access:</p> </li> <li>GUI mode: Browser should open automatically</li> <li>Headless mode: Navigate to <code>http://localhost:8501</code></li> </ol>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li>Browser Launch Fails</li> <li>Use headless mode: <code>coverage-analyzer --headless</code></li> <li> <p>Access via URL: <code>http://localhost:8501</code></p> </li> <li> <p>Port Conflicts <pre><code># Check port usage\nlsof -i :8501      # Unix/macOS\nnetstat -ano | findstr :8501  # Windows\n\n# Use different port\nexport STREAMLIT_SERVER_PORT=8502\n</code></pre></p> </li> </ol>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":"<p>For development installations:</p> <ol> <li> <p>Verify Python version:    <pre><code>python --version  # Should be 3.10+\n</code></pre></p> </li> <li> <p>Check virtual environment:    <pre><code># Should show .venv/bin/python\nwhich python  # Unix/macOS\nwhere python  # Windows\n</code></pre></p> </li> </ol>"},{"location":"stellarcyberapi/","title":"StellarCyberAPI","text":""},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI","title":"<code>StellarCyberAPI</code>","text":"<p>StellarCyberAPI is a client for interacting with the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Stellar Cyber host URL (e.g. https://example.stellarcyber.cloud)</p> required <code>username</code> <code>str</code> <p>Stellar Cyber username (Generally an email address)</p> required <code>api_key</code> <code>str</code> <p>Stellar Cyber API key</p> required <code>version</code> <code>Literal['4.3.0', '4.3.1', '4.3.7', '5.1.x', '5.2.x', '5.3.x']</code> <p>Stellar Cyber Platform version, defaults to \"5.2.x\"</p> <code>'5.2.x'</code> <code>verify_ssl</code> <code>bool | None</code> <p>Boolean to verify SSL of Stellar Cyber Host, defaults to True</p> <code>None</code>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.alert_stats","title":"<code>alert_stats(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return alert statistics for a given date range.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>str | None</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Alert statistics dictionary.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.es_search","title":"<code>es_search(index, query)</code>","text":"<p>Public method to query Stellar Cyber Elasticsearch index with query.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>Elasticsearch index name.</p> required <code>query</code> <code>dict</code> <p>Query dictionary.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Response JSON dictionary.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_connector_log_data_sources","title":"<code>get_connector_log_data_sources(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return a list of connector log data sources.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>str | None</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of connector log data sources.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_connectors","title":"<code>get_connectors(tenant_id=None)</code>","text":"<p>Public method to return a list of connectors from the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>str | None</code> <p>Supply a tenant_id to restrict to a single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of connectors as dictionaries.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_detections","title":"<code>get_detections(tenant_id=None, only_builtin=None, only_custom=None)</code>","text":"<p>Public method to return a list of detections from the Stellar Cyber API. Either all, only built-in, or only custom.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>str | None</code> <p>Supply a tenant_id to restrict to a single tenant. Defaults to None.</p> <code>None</code> <code>only_builtin</code> <code>bool | None</code> <p>Return only built-in detections. Defaults to False.</p> <code>None</code> <code>only_custom</code> <code>bool | None</code> <p>Return only custom detections. Defaults to False.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of detections as dictionaries.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_sensor_sources","title":"<code>get_sensor_sources(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return a list of sensor sources.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>str | None</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of sensor sources.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_tenants","title":"<code>get_tenants(as_options=None)</code>","text":"<p>Public method to return a list of tenants from the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>as_options</code> <code>bool | None</code> <p>Return just tenant names as sorted list. Defaults to False.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str] | list[dict[str, Any]]</code> <p>List of tenants as dictionaries or names.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_token","title":"<code>get_token()</code>","text":"<p>Public method to return the current access token as string.</p> <p>Returns:</p> Type Description <code>str</code> <p>Access token string.</p>"},{"location":"stellarmitre/","title":"StellarMitre Reference","text":""},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre","title":"<code>StellarMitre</code>","text":"<p>This class handles interactions with the MITRE ATT&amp;CK framework. Implements caching, efficient data processing, and error handling.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.__init__","title":"<code>__init__()</code>","text":"<p>Initialize StellarMitre with optimized caching and file handling.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.generate_navigator_layer","title":"<code>generate_navigator_layer(name, techniques_with_scores, description=None)</code>","text":"<p>Generate a MITRE ATT&amp;CK Navigator layer file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the layer</p> required <code>techniques_with_scores</code> <code>dict[str, float]</code> <p>Dictionary mapping technique IDs to scores (0-100)</p> required <code>description</code> <code>str | None</code> <p>Optional description of the layer</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary containing the ATT&amp;CK Navigator layer data</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_detections","title":"<code>get_detections(version='5.2.x')</code>","text":"<p>Return a list of detections from detections.stellarcyber.ai</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_detections_datasources","title":"<code>get_detections_datasources(as_options=None)</code>","text":"<p>Return a list of data sources from detections.stellarcyber.ai</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_tactics","title":"<code>get_tactics()</code>","text":"<p>Return a cached list of tactics from the MITRE ATT&amp;CK framework.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_tactics_and_techniques","title":"<code>get_tactics_and_techniques()</code>","text":"<p>Return a list of tactics with their associated techniques.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_techniques","title":"<code>get_techniques()</code>","text":"<p>Return a cached list of techniques from the MITRE ATT&amp;CK framework.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_techniques_by_tactic","title":"<code>get_techniques_by_tactic(tactic)</code>","text":"<p>Return a cached list of techniques by tactic.</p>"},{"location":"streamlitcoverageanalyzer/","title":"StreamlitCoverageAnalyzer Reference","text":""},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient","title":"<code>StreamlitCoverageAnalyzerClient</code>","text":"<p>This class is used by a streamlit app to interact with the Stellar Cyber API and MITRE ATT&amp;CK framework</p> <p>This class introduces caching and streamlit session management of data using coverage_analyzer.stellar.StellarCyberAPI and coverage_analyzer.mitre.StellarMitre classes.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Stellar Cyber host URL (e.g. https://example.stellarcyber.cloud)</p> required <code>username</code> <code>str</code> <p>Stellar Cyber username (Generally an email address)</p> required <code>api_key</code> <code>str</code> <p>Stellar Cyber API key</p> required <code>version</code> <code>Literal['5.3.x', '5.2.x', '5.1.x', '4.3.7', '4.3.1', '4.3.0']</code> <p>Stellar Cyber Platform version, defaults to \"5.2.x\"</p> <code>'5.2.x'</code> <code>verify_ssl</code> <code>bool | None</code> <p>Boolean to verify SSL of Stellar Cyber Host, defaults to True</p> <code>None</code> <code>cache_ttl</code> <code>float | timedelta | str | None</code> <p>The time to live for cached data, defaults to 15m.</p> <code>'15m'</code> <p>Attributes:</p> Name Type Description <code>version</code> <code>Literal['5.3.x', '5.2.x', '5.1.x', '4.3.7', '4.3.1', '4.3.0']</code> <p>The version of the Stellar Cyber Platform to interact with.</p> <code>cache_ttl</code> <code>float | timedelta | str | None</code> <p>The time to live for cached data.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.compile_stats","title":"<code>compile_stats(data_sources, start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to compile statistics from tactics, techniques, and data sources into a single dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>str | None</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>Dictionary of compiled statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.generate_navigator_layer","title":"<code>generate_navigator_layer(name, techniques_with_scores, description=None)</code>","text":"<p>Public method to generate a MITRE ATT&amp;CK Navigator layer file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the layer</p> required <code>techniques_with_scores</code> <code>dict[str, float]</code> <p>Dictionary mapping technique IDs to scores (0-100)</p> required <code>description</code> <code>str | None</code> <p>Optional description of the layer</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary containing the ATT&amp;CK Navigator layer data</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_alert_stats","title":"<code>get_alert_stats(alert_type_hits, data_sources, with_recommendations=None)</code>","text":"<p>Public method to return a dictionary of alert statistics from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>alert_type_hits</code> <code>dict[str, Any]</code> <p>The alert type hits dictionary to filter alert statistics by.</p> required <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter alert statistics by.</p> required <code>with_recommendations</code> <code>bool | None</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of alert statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_alert_type_hits","title":"<code>get_alert_type_hits(start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to return a dictionary of alert type hits from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>The start date to filter alert type hits by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter alert type hits by.</p> required <code>tenant_name</code> <code>str | None</code> <p>The tenant name to filter alert type hits by.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of alert type hits.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_custom_detections","title":"<code>get_custom_detections(tenant_id=None, only_builtin=None, only_custom=None)</code>","text":"<p>Public method to return a list of custom detections from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>str | None</code> <p>The tenant ID to filter detections by.</p> <code>None</code> <code>only_builtin</code> <code>bool | None</code> <p>Filter only builtin detections.</p> <code>None</code> <code>only_custom</code> <code>bool | None</code> <p>Filter only custom detections</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of detections as dictionaries</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_datasource_stats","title":"<code>get_datasource_stats(data_sources)</code>","text":"<p>Public method to return a dictionary of data source statistics from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter data source statistics by.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>Dictionary of data source statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_detections","title":"<code>get_detections()</code>","text":"<p>Public method to return a list of detections from detections.stellarcyber.ai</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of detections as dictionaries</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_detections_datasources","title":"<code>get_detections_datasources(as_options=None)</code>","text":"<p>Public method to return a list of data sources objects from detections.stellarcyber.ai</p> <p>Parameters:</p> Name Type Description Default <code>as_options</code> <code>bool | None</code> <p>If True, return a list of data sources as strings. Defaults to True.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str] | list[dict[str, Any]]</code> <p>List of detection data sources as dictionaries.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_matching_alert_types_count_from_ds","title":"<code>get_matching_alert_types_count_from_ds(data_sources, tactic, technique=None)</code>","text":"<p>Public method to return a count of matching alert types based on data sources from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter alert types by.</p> required <code>tactic</code> <code>str</code> <p>The tactic to filter alert types by.</p> required <code>technique</code> <code>str | None</code> <p>The technique to filter alert types by.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Count of matching alert types.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_matching_alert_types_count_from_hits","title":"<code>get_matching_alert_types_count_from_hits(alert_type_hits, tactic, technique=None)</code>","text":"<p>Public method to return a count of matching alert types based on hits from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>alert_type_hits</code> <code>dict[str, Any]</code> <p>The alert type hits dictionary to filter alert types by.</p> required <code>tactic</code> <code>str</code> <p>The tactic to filter alert types by.</p> required <code>technique</code> <code>str | None</code> <p>The technique to filter alert types by.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Count of matching alert types.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_tactics","title":"<code>get_tactics()</code>","text":"<p>Public method to return a list of tactics from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>List of tactics as dictionaries.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_tactics_and_techniques","title":"<code>get_tactics_and_techniques()</code>","text":"<p>Public method to return a dictionary of tactics and techniques from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>Dictionary of tactics and techniques.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_tactics_stats","title":"<code>get_tactics_stats(data_sources, start_date, end_date, tenant_name=None, with_recommendations=None)</code>","text":"<p>Public method to return a dictionary of statistics for the provided list of tactics from the MITRE ATT&amp;CK framework.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>str | None</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <code>with_recommendations</code> <code>bool | None</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of tactics statistics for the provided list of tactics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_technique_stats","title":"<code>get_technique_stats(data_sources, start_date, end_date, tenant_name=None, with_recommendations=None)</code>","text":"<p>Public method to return a dictionary of statistics for the provided list of tactics and their techniques from the MITRE ATT&amp;CK framework.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>list[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>str | None</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <code>with_recommendations</code> <code>bool | None</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary of technique statistics for the provided list of tactics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_tenants","title":"<code>get_tenants()</code>","text":"<p>Public method to return a list of tenants from Stellar Cyber API</p> <p>Returns:</p> Type Description <code>list[str] | list[dict[str, Any]]</code> <p>List of tenants as strings</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzerClient.get_used_datasources","title":"<code>get_used_datasources(start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to return a list of used data sources from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>The start date to filter data sources by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter data sources by.</p> required <code>tenant_name</code> <code>str | None</code> <p>The tenant name to filter data sources by.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of used data sources as strings</p>"},{"location":"testing/","title":"Testing Guide","text":""},{"location":"testing/#overview","title":"Overview","text":"<p>This guide outlines testing strategies and best practices for the Coverage Analyzer application. It covers unit testing, integration testing, performance testing, and security testing.</p>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 test_mitre.py\n\u2502   \u251c\u2500\u2500 test_stellar.py\n\u2502   \u251c\u2500\u2500 test_plots.py\n\u2502   \u2514\u2500\u2500 test_streamlit.py\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 test_api_integration.py\n\u2502   \u2514\u2500\u2500 test_data_flow.py\n\u251c\u2500\u2500 performance/\n\u2502   \u251c\u2500\u2500 test_data_processing.py\n\u2502   \u2514\u2500\u2500 test_visualization.py\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"testing/#unit-testing","title":"Unit Testing","text":""},{"location":"testing/#mitre-integration-tests","title":"MITRE Integration Tests","text":"<pre><code>def test_get_tactics():\n    mitre = StellarMitre()\n    tactics = mitre.get_tactics()\n    assert isinstance(tactics, list)\n    assert all(isinstance(t, dict) for t in tactics)\n    assert all(\"name\" in t for t in tactics)\n\ndef test_get_techniques():\n    mitre = StellarMitre()\n    techniques = mitre.get_techniques()\n    assert isinstance(techniques, list)\n    assert all(isinstance(t, dict) for t in techniques)\n    assert all(\"name\" in t for t in techniques)\n</code></pre>"},{"location":"testing/#api-client-tests","title":"API Client Tests","text":"<pre><code>def test_api_authentication():\n    api = StellarCyberAPI(host=\"test\", username=\"test\", api_key=\"test\")\n    with pytest.raises(HTTPError):\n        api.get_token()\n\ndef test_token_refresh():\n    api = StellarCyberAPI(host=\"test\", username=\"test\", api_key=\"test\")\n    api.token = {\"access_token\": \"test\", \"exp\": 0}\n    assert api._get_token() != \"test\"\n</code></pre>"},{"location":"testing/#data-processing-tests","title":"Data Processing Tests","text":"<pre><code>def test_prepare_coverage_data():\n    test_data = pl.DataFrame({\n        \"tactic\": [\"test\"],\n        \"technique\": [\"test\"],\n        \"covered\": [True],\n        \"triggered\": [False]\n    })\n    result = prepare_coverage_data(test_data)\n    assert isinstance(result, pl.DataFrame)\n    assert \"coverage_ratio\" in result.columns\n</code></pre>"},{"location":"testing/#integration-testing","title":"Integration Testing","text":""},{"location":"testing/#api-integration","title":"API Integration","text":"<pre><code>def test_full_data_flow():\n    analyzer = StreamlitCoverageAnalyzer(\n        name=\"test\",\n        host=\"test\",\n        username=\"test\",\n        api_key=\"test\"\n    )\n    stats = analyzer.compile_stats(\n        data_sources=[\"test\"],\n        start_date=date.today(),\n        end_date=date.today()\n    )\n    assert isinstance(stats, dict)\n    assert \"tactics\" in stats\n    assert \"techniques\" in stats\n</code></pre>"},{"location":"testing/#data-pipeline-tests","title":"Data Pipeline Tests","text":"<pre><code>def test_data_pipeline():\n    # Test data flow from API to visualization\n    data = get_test_data()\n    processed = process_data(data)\n    visualized = create_visualization(processed)\n    assert visualized is not None\n</code></pre>"},{"location":"testing/#performance-testing","title":"Performance Testing","text":""},{"location":"testing/#data-processing-performance","title":"Data Processing Performance","text":"<pre><code>def test_large_dataset_performance():\n    large_data = generate_large_dataset()\n    start_time = time.time()\n    result = process_large_dataset(large_data)\n    end_time = time.time()\n    assert end_time - start_time &lt; 5.0  # Should process in under 5 seconds\n</code></pre>"},{"location":"testing/#memory-usage-tests","title":"Memory Usage Tests","text":"<pre><code>def test_memory_usage():\n    import psutil\n    process = psutil.Process()\n    initial_memory = process.memory_info().rss\n    process_large_dataset()\n    final_memory = process.memory_info().rss\n    assert (final_memory - initial_memory) / 1024 / 1024 &lt; 100  # Less than 100MB increase\n</code></pre>"},{"location":"testing/#load-testing","title":"Load Testing","text":""},{"location":"testing/#api-load-tests","title":"API Load Tests","text":"<pre><code>def test_api_load():\n    import asyncio\n    async def make_requests():\n        tasks = [api_request() for _ in range(100)]\n        return await asyncio.gather(*tasks)\n\n    results = asyncio.run(make_requests())\n    assert all(r.status_code == 200 for r in results)\n</code></pre>"},{"location":"testing/#concurrent-user-tests","title":"Concurrent User Tests","text":"<pre><code>def test_concurrent_users():\n    import threading\n    users = [threading.Thread(target=simulate_user) for _ in range(10)]\n    for user in users:\n        user.start()\n    for user in users:\n        user.join()\n</code></pre>"},{"location":"testing/#security-testing","title":"Security Testing","text":""},{"location":"testing/#input-validation-tests","title":"Input Validation Tests","text":"<pre><code>def test_input_validation():\n    with pytest.raises(ValueError):\n        process_data({\"malicious\": \"input\"})\n\n    with pytest.raises(ValueError):\n        process_data({\"sql\": \"DROP TABLE users\"})\n</code></pre>"},{"location":"testing/#authentication-tests","title":"Authentication Tests","text":"<pre><code>def test_authentication():\n    with pytest.raises(HTTPError):\n        api.get_token(invalid_credentials=True)\n\n    assert api.get_token(valid_credentials=True) is not None\n</code></pre>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":""},{"location":"testing/#pytest-configuration","title":"pytest Configuration","text":"<pre><code># conftest.py\nimport pytest\n\n@pytest.fixture\ndef test_data():\n    return {\n        \"tactics\": [\"test_tactic\"],\n        \"techniques\": [\"test_technique\"]\n    }\n\n@pytest.fixture\ndef mock_api():\n    return MockAPI()\n</code></pre>"},{"location":"testing/#environment-setup","title":"Environment Setup","text":"<pre><code># test_environment.py\nimport os\n\nos.environ[\"TEST_MODE\"] = \"true\"\nos.environ[\"MOCK_API\"] = \"true\"\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.10'\n      - name: Install dependencies\n        run: |\n          python -m pip install poetry\n          poetry install\n      - name: Run tests\n        run: |\n          poetry run pytest\n</code></pre>"},{"location":"testing/#test-coverage","title":"Test Coverage","text":""},{"location":"testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code># .coveragerc\n[run]\nsource = coverage_analyzer\nomit = tests/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise NotImplementedError\n</code></pre>"},{"location":"testing/#coverage-reporting","title":"Coverage Reporting","text":"<pre><code># Run tests with coverage\npoetry run pytest --cov=coverage_analyzer --cov-report=term-missing\n</code></pre>"},{"location":"testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Organization</li> <li>Group related tests</li> <li>Use meaningful names</li> <li>Follow consistent patterns</li> <li> <p>Maintain test independence</p> </li> <li> <p>Test Data</p> </li> <li>Use fixtures</li> <li>Mock external services</li> <li>Clean up test data</li> <li> <p>Use realistic samples</p> </li> <li> <p>Assertions</p> </li> <li>Be specific</li> <li>Check edge cases</li> <li>Validate types</li> <li> <p>Test error conditions</p> </li> <li> <p>Performance</p> </li> <li>Profile tests</li> <li>Monitor memory usage</li> <li>Check execution time</li> <li>Optimize slow tests</li> </ol>"},{"location":"testing/#maintenance","title":"Maintenance","text":"<ol> <li>Regular Tasks</li> <li>Run all tests</li> <li>Update test data</li> <li>Check coverage</li> <li> <p>Review failures</p> </li> <li> <p>Updates</p> </li> <li>Add new tests</li> <li>Update existing tests</li> <li>Remove obsolete tests</li> <li> <p>Update documentation</p> </li> <li> <p>Monitoring</p> </li> <li>Test execution time</li> <li>Coverage metrics</li> <li>Failure patterns</li> <li>Resource usage</li> </ol>"}]}