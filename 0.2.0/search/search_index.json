{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart","text":"<p>Made with Streamlit</p>"},{"location":"#about","title":"About","text":"<p>Description of App. </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#executable-simplest","title":"Executable (Simplest)","text":"<p>All dependencies packaged into executable application for desktop or server macOS (arm64 and intel), Windows, Linux</p> <p>Download from releases</p>"},{"location":"#macos","title":"macOS","text":"<p>Separate installers for arm64 (apple silicon) and intel (x86_64)</p> <ol> <li>blah blah</li> <li>blah</li> <li>blah</li> <li>blah</li> </ol>"},{"location":"#windows","title":"Windows","text":"<p>x86_64 only</p>"},{"location":"#linux","title":"Linux","text":"<p>x86_64 only</p>"},{"location":"#docker","title":"Docker","text":"<p>Use prebuilt or manually build Prebuilt supports both arm64 and amd64/x86_64</p> <ol> <li>blah</li> <li>blah blah</li> <li>blah blah blah</li> </ol>"},{"location":"#manually","title":"Manually","text":"<p>Will require installing dependencies</p> <ol> <li>blah</li> <li>blah blah</li> <li>blah blah blah</li> </ol> <p>For more details or advanced installation: Installation</p>"},{"location":"#usage","title":"Usage","text":"<p><code>example command</code></p> <pre><code>import requests\n\nrequests.get(\"google.com\")\n</code></pre> <p>For more details or advanced usage: Usage</p>"},{"location":"development/","title":"Development Documentation","text":""},{"location":"development/#about","title":"About","text":""},{"location":"development/#architecture","title":"Architecture","text":""},{"location":"development/#customize","title":"Customize","text":""},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"installation/","title":"Installation Documentation","text":""},{"location":"installation/#manual","title":"Manual","text":"<ol> <li>Clone the repository: <code>git clone https://github.com/stellarcyber/detection_coverage_app.git</code></li> <li>Go to the cloned directory: <code>cd detection_coverage_app</code></li> <li> <p>Install depencies:</p> PoetryPip <p>If you don't already have poetry installed: Here</p> <pre><code>poetry install\n</code></pre> <p><pre><code>python3 -m venv .venv\n</code></pre> <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run the app: </p> PoetryPip <p><pre><code>coverage-analyzer\n</code></pre> or <pre><code>coverage-analyzer --headless\n</code></pre></p> <p>From within the activated .venv ... <pre><code>python run.py\n</code></pre> or <pre><code>python run.py --headless\n</code></pre></p> </li> <li> <p>To stop the app: <code>CTRL-C</code></p> </li> </ol>"},{"location":"stellarcyberapi/","title":"StellarCyberAPI","text":"<p>StellarCyberAPI</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI","title":"<code>StellarCyberAPI</code>","text":"<p>StellarCyberAPI is a client for interacting with the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Stellar Cyber host URL (e.g. https://example.stellarcyber.cloud)</p> required <code>username</code> <code>str</code> <p>Stellar Cyber username (Generally an email address)</p> required <code>api_key</code> <code>str</code> <p>Stellar Cyber API key</p> required <code>version</code> <code>['4.3.0', '4.3.1', '4.3.7', x, x, x]</code> <p>Stellar Cyber Platform version, defaults to \"5.2.x\"</p> <code>'5.2.x'</code> <code>verify_ssl</code> <code>bool</code> <p>Boolean to verify SSL of Stellar Cyber Host, defaults to True</p> <code>True</code>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.alert_stats","title":"<code>alert_stats(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return alert statistics for a given date range.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>Optional[str]</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Alert statistics dictionary.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.es_search","title":"<code>es_search(index, query)</code>","text":"<p>Public method to query Stellar Cyber Elasticsearch index with query.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>Elasticsearch index name.</p> required <code>query</code> <code>Dict</code> <p>Query dictionary.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Response JSON dictionary.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_connector_log_data_sources","title":"<code>get_connector_log_data_sources(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return a list of connector log data sources.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>Optional[str]</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Optional[Dict[str, Any]]]</code> <p>List of connector log data sources.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_connectors","title":"<code>get_connectors(tenant_id=None)</code>","text":"<p>Public method to return a list of connectors from the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>Optional[str]</code> <p>Supply a tenant_id to restrict to a single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Optional[Dict[str, Any]]]</code> <p>List of connectors as dictionaries.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_detections","title":"<code>get_detections(tenant_id=None, only_builtin=False, only_custom=False)</code>","text":"<p>Public method to return a list of detections from the Stellar Cyber API. Either all, only built-in, or only custom.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>Optional[str]</code> <p>Supply a tenant_id to restrict to a single tenant. Defaults to None.</p> <code>None</code> <code>only_builtin</code> <code>bool</code> <p>Return only built-in detections. Defaults to False.</p> <code>False</code> <code>only_custom</code> <code>bool</code> <p>Return only custom detections. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Optional[Dict[str, Any]]]</code> <p>List of detections as dictionaries.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_sensor_sources","title":"<code>get_sensor_sources(start_date, end_date, tenant=None)</code>","text":"<p>Public method to return a list of sensor sources.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>Start date object for query.</p> required <code>end_date</code> <code>date</code> <p>End date object for query.</p> required <code>tenant</code> <code>Optional[str]</code> <p>Tenant to restrict to single tenant. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Optional[Dict[str, Any]]]</code> <p>List of sensor sources.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_tenants","title":"<code>get_tenants(as_options=False)</code>","text":"<p>Public method to return a list of tenants from the Stellar Cyber API.</p> <p>Parameters:</p> Name Type Description Default <code>as_options</code> <code>bool</code> <p>Return just tenant names as sorted list. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Optional[Union[str, Dict[str, Any]]]]</code> <p>List of tenants as dictionaries or names.</p>"},{"location":"stellarcyberapi/#coverage_analyzer.stellar.StellarCyberAPI.get_token","title":"<code>get_token()</code>","text":"<p>Public method to return the current access token as string.</p> <p>Returns:</p> Type Description <code>str</code> <p>Access token string.</p>"},{"location":"stellarmitre/","title":"StellarMitre","text":""},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre","title":"<code>StellarMitre</code>","text":"<p>This class is used to interact with the MITRE ATT&amp;CK framework.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_detections","title":"<code>get_detections(version='5.2.x')</code>","text":"<p>Public method to return a list of detections from detecions.stellarcyber.ai</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>Literal['4.3.0', '4.3.1', '4.3.7', '5.1.x', '5.2.x', '5.3.x']</code> <p>The version of the detections to retrieve from [\"4.3.0\", \"4.3.1\", \"4.3.7\", \"5.1.x\", \"5.2.x\", \"5.3.x\"]. Defaults to \"5.2.x\".</p> <code>'5.2.x'</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of detections as dictionaries.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_detections_datasources","title":"<code>get_detections_datasources(as_options=False)</code>","text":"<p>Public method to return a list of data sources objects from detections.stellarcyber.ai</p> <p>Parameters:</p> Name Type Description Default <code>as_options</code> <code>bool</code> <p>If True, return a list of data sources as strings. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Union[str, Dict[str, Any]]]</code> <p>List of detection data sources as dictionaries.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_tactics","title":"<code>get_tactics()</code>","text":"<p>Public method to return a list of tactics from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of tactics as dictionaries.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_tactics_and_techniques","title":"<code>get_tactics_and_techniques()</code>","text":"<p>Public method to return a dictionary of tactics and techniques from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>Dictionary of tactics and techniques.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_techniques","title":"<code>get_techniques()</code>","text":"<p>Public method to return a list of techniques from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of techniques as dictionaries.</p>"},{"location":"stellarmitre/#coverage_analyzer.mitre.StellarMitre.get_techniques_by_tactic","title":"<code>get_techniques_by_tactic(tactic)</code>","text":"<p>Public method to return a list of techniques by tactic from the MITRE ATT&amp;CK framework.</p> <p>Parameters:</p> Name Type Description Default <code>tactic</code> <code>str</code> <p>The tactic to filter techniques by.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of techniques as dictionaries.</p>"},{"location":"streamlitcoverageanalyzer/","title":"StreamlitCoverageAnalyzer","text":""},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer","title":"<code>StreamlitCoverageAnalyzer</code>","text":"<p>This class is used by a streamlit app to interact with the Stellar Cyber API and MITRE ATT&amp;CK framework</p> <p>This class introduces caching and streamlit session management of data using coverage_analyzer.stellar.StellarCyberAPI and coverage_analyzer.mitre.StellarMitre classes.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Stellar Cyber host URL (e.g. https://example.stellarcyber.cloud)</p> required <code>username</code> <code>str</code> <p>Stellar Cyber username (Generally an email address)</p> required <code>api_key</code> <code>str</code> <p>Stellar Cyber API key</p> required <code>version</code> <code>Literal['5.3.x', '5.2.x', '5.1.x', '4.3.7', '4.3.1', '4.3.0']</code> <p>Stellar Cyber Platform version, defaults to \"5.2.x\"</p> <code>'5.2.x'</code> <code>verify_ssl</code> <code>bool</code> <p>Boolean to verify SSL of Stellar Cyber Host, defaults to True</p> <code>True</code> <code>cache_ttl</code> <code>Optional[Union[float, timedelta, str]]</code> <p>The time to live for cached data, defaults to 15m.</p> <code>'15m'</code> <p>Attributes:</p> Name Type Description <code>version</code> <code>Literal['5.3.x', '5.2.x', '5.1.x', '4.3.7', '4.3.1', '4.3.0']</code> <p>The version of the Stellar Cyber Platform to interact with.</p> <code>cache_ttl</code> <code>Optional[Union[float, timedelta, str]]</code> <p>The time to live for cached data.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.compile_stats","title":"<code>compile_stats(data_sources, start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to compile statistics from tactics, techniques, and data sources into a single dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>Optional[str]</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary of compiled statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_alert_stats","title":"<code>get_alert_stats(alert_type_hits, data_sources, with_recommendations=False)</code>","text":"<p>Public method to return a dictionary of alert statistics from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>alert_type_hits</code> <code>Dict[str, Any]</code> <p>The alert type hits dictionary to filter alert statistics by.</p> required <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter alert statistics by.</p> required <code>with_recommendations</code> <code>bool</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of alert statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_alert_type_hits","title":"<code>get_alert_type_hits(start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to return a dictionary of alert type hits from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>The start date to filter alert type hits by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter alert type hits by.</p> required <code>tenant_name</code> <code>Optional[str]</code> <p>The tenant name to filter alert type hits by.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of alert type hits.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_custom_detections","title":"<code>get_custom_detections(tenant_id=None, only_builtin=False, only_custom=False)</code>","text":"<p>Public method to return a list of custom detections from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>Optional[str]</code> <p>The tenant ID to filter detections by.</p> <code>None</code> <code>only_builtin</code> <code>bool</code> <p>Filter only builtin detections.</p> <code>False</code> <code>only_custom</code> <code>bool</code> <p>Filter only custom detections</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Optional[Dict[str, Any]]]</code> <p>List of detections as dictionaries</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_datasource_stats","title":"<code>get_datasource_stats(data_sources)</code>","text":"<p>Public method to return a dictionary of data source statistics from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter data source statistics by.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>Dictionary of data source statistics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_detections","title":"<code>get_detections()</code>","text":"<p>Public method to return a list of detections from detections.stellarcyber.ai</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of detections as dictionaries</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_detections_datasources","title":"<code>get_detections_datasources(as_options=True)</code>","text":"<p>Public method to return a list of data sources objects from detections.stellarcyber.ai</p> <p>Parameters:</p> Name Type Description Default <code>as_options</code> <code>bool</code> <p>If True, return a list of data sources as strings. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>List[Union[str, Dict[str, Any]]]</code> <p>List of detection data sources as dictionaries.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_matching_alert_types_count_from_ds","title":"<code>get_matching_alert_types_count_from_ds(data_sources, tactic, technique=None)</code>","text":"<p>Public method to return a count of matching alert types based on data sources from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter alert types by.</p> required <code>tactic</code> <code>str</code> <p>The tactic to filter alert types by.</p> required <code>technique</code> <code>Optional[str]</code> <p>The technique to filter alert types by.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Count of matching alert types.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_matching_alert_types_count_from_hits","title":"<code>get_matching_alert_types_count_from_hits(alert_type_hits, tactic, technique=None)</code>","text":"<p>Public method to return a count of matching alert types based on hits from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>alert_type_hits</code> <code>Dict[str, Any]</code> <p>The alert type hits dictionary to filter alert types by.</p> required <code>tactic</code> <code>str</code> <p>The tactic to filter alert types by.</p> required <code>technique</code> <code>Optional[str]</code> <p>The technique to filter alert types by.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Count of matching alert types.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_tactics","title":"<code>get_tactics()</code>","text":"<p>Public method to return a list of tactics from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>List[Dict[str, str]]</code> <p>List of tactics as dictionaries.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_tactics_and_techniques","title":"<code>get_tactics_and_techniques()</code>","text":"<p>Public method to return a dictionary of tactics and techniques from the MITRE ATT&amp;CK framework.</p> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>Dictionary of tactics and techniques.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_tactics_stats","title":"<code>get_tactics_stats(data_sources, start_date, end_date, tenant_name=None, with_recommendations=False)</code>","text":"<p>Public method to return a dictionary of statistics for the provided list of tactics from the MITRE ATT&amp;CK framework.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>Optional[str]</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <code>with_recommendations</code> <code>bool</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of tactics statistics for the provided list of tactics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_technique_stats","title":"<code>get_technique_stats(data_sources, start_date, end_date, tenant_name=None, with_recommendations=False)</code>","text":"<p>Public method to return a dictionary of statistics for the provided list of tactics and their techniques from the MITRE ATT&amp;CK framework.</p> <p>Parameters:</p> Name Type Description Default <code>data_sources</code> <code>List[str]</code> <p>The data sources to filter statistics by.</p> required <code>start_date</code> <code>date</code> <p>The start date to filter statistics by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter statistics by.</p> required <code>tenant_name</code> <code>Optional[str]</code> <p>The tenant name to filter statistics by.</p> <code>None</code> <code>with_recommendations</code> <code>bool</code> <p>If True, include recomendations in the statistics. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of technique statistics for the provided list of tactics.</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_tenants","title":"<code>get_tenants()</code>","text":"<p>Public method to return a list of tenants from Stellar Cyber API</p> <p>Returns:</p> Type Description <code>List[Optional[Union[str, Dict[str, Any]]]]</code> <p>List of tenants as strings</p>"},{"location":"streamlitcoverageanalyzer/#coverage_analyzer.streamlit.StreamlitCoverageAnalyzer.get_used_datasources","title":"<code>get_used_datasources(start_date, end_date, tenant_name=None)</code>","text":"<p>Public method to return a list of used data sources from Stellar Cyber API</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>date</code> <p>The start date to filter data sources by.</p> required <code>end_date</code> <code>date</code> <p>The end date to filter data sources by.</p> required <code>tenant_name</code> <code>Optional[str]</code> <p>The tenant name to filter data sources by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of used data sources as strings</p>"},{"location":"usage/","title":"Usage Documentation","text":""},{"location":"usage/#environment-variables","title":"Environment Variables","text":"Environment Variable Description STCA_COOKIES_PASSWORD Password to encrypt the cookies used to save host configurations"},{"location":"vars/","title":"vars","text":""},{"location":"vars/#coverage_analyzer.vars","title":"<code>vars</code>","text":""}]}